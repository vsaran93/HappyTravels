// <auto-generated />
using System;
using HappyTravels.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HappyTravels.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("HappyTravels.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<int>("SeatNumber")
                        .HasColumnType("int");

                    b.Property<int>("TravelScheduleId")
                        .HasColumnType("int");

                    b.Property<int>("TravellerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TravelScheduleId");

                    b.HasIndex("TravellerId")
                        .IsUnique();

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("HappyTravels.Models.Bus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalSeats")
                        .HasColumnType("int");

                    b.Property<int>("TravelServiceCompanyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TravelServiceCompanyId");

                    b.ToTable("Buses");
                });

            modelBuilder.Entity("HappyTravels.Models.Traveller", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Travellers");
                });

            modelBuilder.Entity("HappyTravels.Models.TravelSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BusId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Fare")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("StartingPoint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TravelServiceCompanyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusId")
                        .IsUnique();

                    b.HasIndex("TravelServiceCompanyId");

                    b.ToTable("TravelSchedules");
                });

            modelBuilder.Entity("HappyTravels.Models.TravelServiceCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TravelServiceCompanies");
                });

            modelBuilder.Entity("HappyTravels.Models.Booking", b =>
                {
                    b.HasOne("HappyTravels.Models.TravelSchedule", "TravelSchedule")
                        .WithMany("Bookings")
                        .HasForeignKey("TravelScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HappyTravels.Models.Traveller", "Traveller")
                        .WithOne("Booking")
                        .HasForeignKey("HappyTravels.Models.Booking", "TravellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TravelSchedule");

                    b.Navigation("Traveller");
                });

            modelBuilder.Entity("HappyTravels.Models.Bus", b =>
                {
                    b.HasOne("HappyTravels.Models.TravelServiceCompany", "TravelServiceCompany")
                        .WithMany("Buses")
                        .HasForeignKey("TravelServiceCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TravelServiceCompany");
                });

            modelBuilder.Entity("HappyTravels.Models.TravelSchedule", b =>
                {
                    b.HasOne("HappyTravels.Models.Bus", "Bus")
                        .WithOne("TravelSchedule")
                        .HasForeignKey("HappyTravels.Models.TravelSchedule", "BusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HappyTravels.Models.TravelServiceCompany", "TravelServiceCompany")
                        .WithMany("TravelSchedules")
                        .HasForeignKey("TravelServiceCompanyId");

                    b.Navigation("Bus");

                    b.Navigation("TravelServiceCompany");
                });

            modelBuilder.Entity("HappyTravels.Models.Bus", b =>
                {
                    b.Navigation("TravelSchedule");
                });

            modelBuilder.Entity("HappyTravels.Models.Traveller", b =>
                {
                    b.Navigation("Booking");
                });

            modelBuilder.Entity("HappyTravels.Models.TravelSchedule", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("HappyTravels.Models.TravelServiceCompany", b =>
                {
                    b.Navigation("Buses");

                    b.Navigation("TravelSchedules");
                });
#pragma warning restore 612, 618
        }
    }
}
